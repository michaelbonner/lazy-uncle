// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  scope                 String?
  oauth_token_secret    String?
  oauth_token           String?
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("account")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?

  user User @relation(fields: [userId], references: [id])

  @@unique([token])
  @@index([userId])
  @@map("session")
}

model Birthday {
  id           String    @id @default(cuid())
  name         String
  date         String
  category     String?
  parent       String?
  notes        String?   @db.Text
  createdAt    DateTime?
  userId       String
  importSource String? // "manual", "csv", "sharing", etc.

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model User {
  id            String  @id @default(cuid())
  email         String  @unique
  name          String?
  emailVerified Boolean @default(false)
  image         String?

  createdAt DateTime?
  updatedAt DateTime

  accounts               Account[]
  sessions               Session[]
  birthdays              Birthday[]
  sharingLinks           SharingLink[]
  notificationPreference NotificationPreference?

  @@map("user")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model SharingLink {
  id          String   @id @default(cuid())
  token       String   @unique
  userId      String
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  isActive    Boolean  @default(true)
  description String?

  user        User                 @relation(fields: [userId], references: [id])
  submissions BirthdaySubmission[]

  @@index([userId])
  @@index([token])
}

model BirthdaySubmission {
  id             String           @id @default(cuid())
  sharingLinkId  String
  name           String
  date           String
  category       String?
  notes          String?          @db.Text
  submitterName  String?
  submitterEmail String?
  relationship   String?
  status         SubmissionStatus @default(PENDING)
  createdAt      DateTime         @default(now())

  sharingLink SharingLink @relation(fields: [sharingLinkId], references: [id])

  @@index([sharingLinkId])
  @@index([status])
}

model NotificationPreference {
  id                   String  @id @default(cuid())
  userId               String  @unique
  emailNotifications   Boolean @default(true)
  summaryNotifications Boolean @default(false)

  user User @relation(fields: [userId], references: [id])
}

enum SubmissionStatus {
  PENDING
  IMPORTED
  REJECTED
}
